{"version":3,"sources":["utils/tokenManager.js","utils/config.js","services/bikeData.js","services/user.js","components/StationList.js","components/SituationScreen.js","components/LoginScreen.js","App.js","index.js"],"names":["TOKEN","BIKE_API_URI","LOGIN_API_URI","process","headers","Authorization","token","URI","config","LAST_FETCH_TIME","getBikeData","a","timeNow","Date","valueOf","AuthorizationHeader","tokenManager","axios","get","response","status","data","bikeData","console","log","lastFetchTime","stations","statusText","resetLastFetchTime","CREATE_URI","LOGIN_URI","HOMESTATION_URI","login","username","password","post","isLoggedIn","window","localStorage","setItem","homeStation","error","message","createUser","bCreated","storeHomeStation","station","StationItem","selectCenter","isCenter","name","bikesAvailable","totalSpace","spacesAvailable","bikes","cssName","bikeSituation","className","onDoubleClick","StationList","centerId","setCenter","useState","nameCriteria","setNameCriteria","length","storedStation","JSON","stringify","userService","nameCriteriaLower","toLowerCase","tableSatitons","filter","s","includes","map","key","stationId","onChange","event","target","value","list","type","id","updateBikeData","setBikeData","bikeDataService","CenterSation","center","SituationScreen","defaultCenter","getItem","parse","getStoredStationCenter","showStationList","setShowStationList","useEffect","updateTicker","setInterval","clearTimeout","centerData","find","timeString","toLocaleString","btnText","onClick","state","homeStationKeys","LoginScreen","setUser","setUsername","setPassword","errorMessage","setErrorMessage","userLoginHandler","preventDefault","setTimeout","every","last_fetch_time","bikes_available","spaces_available","realtime","lat","lon","allow_drop_off","allowDropoff","userCreateHandler","onSubmit","App","storedUser","storedToken","clear","getStoredUser","user","userText","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2af2e919.chunk.js","sourcesContent":["let TOKEN\r\n\r\nexport const getToken = () => {\r\n    return TOKEN\r\n}\r\n\r\nexport const setToken = (token) => {\r\n    TOKEN = token ? `bearer ${token}` : null\r\n}\r\n\r\nexport const getAuthHeader = () => {\r\n    return {\r\n        headers: { Authorization: TOKEN }\r\n    }\r\n}\r\n\r\nexport default {\r\n    getAuthHeader,\r\n    setToken,\r\n    getToken\r\n}","const NODE_ENV = process.env.NODE_ENV\r\nconst DEV_URI = 'http://localhost:3001' //process.env.REACT_APP_DEV_URI\r\nconst BIKE_API_URI = (NODE_ENV === 'development' && DEV_URI) ? `${DEV_URI}/api`: './api'\r\nconst LOGIN_API_URI = process.env.REACT_APP_LOGIN_API_URI || 'http://localhost:3004'\r\n\r\nexport default {\r\n    BIKE_API_URI,\r\n    LOGIN_API_URI\r\n}","import config from 'utils/config'\r\nimport axios from 'axios'\r\nimport tokenManager from 'utils/tokenManager'\r\n\r\nconst URI = `${config.BIKE_API_URI}/v1/bikeData`\r\n\r\n/* prevent client from spamming updates --> server BIKE_DATA updates every 1 min */\r\nlet LAST_FETCH_TIME = 0\r\n\r\nconst resetLastFetchTime = () => LAST_FETCH_TIME = 0\r\n\r\n/**\r\n * @typedef {{\r\n    name: String, //station name\r\n    stationId: String, \r\n    bikesAvailable: 8, \r\n    spacesAvailable: Number,\r\n    realtime: Boolean, //are bikes&spaces realtime numbers (true) or is bikesAvailable = spacesAvailable / 2 (false)\r\n    lat: Number, //latitude\r\n    lon: Number //longitude\r\n    allowDropoff: Boolean //basically is it in action\r\n * }} bikeStation\r\n */\r\n\r\n/**\r\n * @returns { Promise<?{ lastFetchTime: Number, stations: Array<bikeStation> }> }\r\n * Null if data fetch failed/no update available yet\r\n */\r\nconst getBikeData = async () => {\r\n    const timeNow = new Date().valueOf()\r\n    const minuteInMsec = 60 * 1000\r\n    if (LAST_FETCH_TIME > timeNow - minuteInMsec) {\r\n        return null\r\n    }\r\n\r\n    try {\r\n        const AuthorizationHeader = tokenManager.getAuthHeader()\r\n        \r\n        const response = await axios.get(URI, AuthorizationHeader)\r\n        if (response.status !== 200 || !response.data || !response.data.bikeData) {\r\n            console.log('BIKEDATA: FETCH FAILED', response.status)\r\n            return null\r\n        }\r\n\r\n        const { lastFetchTime, stations } = response.data.bikeData\r\n        LAST_FETCH_TIME = lastFetchTime\r\n        return { lastFetchTime, stations }\r\n    } catch (error) {\r\n        if(error.response) {\r\n            console.log('BIKEDATA: FETCH FAILED', error.response.statusText)\r\n        } else {\r\n            console.log('BIKEDATA: FETCH FAILED', error.status)\r\n        }\r\n        return null\r\n    }\r\n}\r\n\r\n\r\nexport default {\r\n    getBikeData,\r\n    resetLastFetchTime\r\n}\r\n","import config from 'utils/config'\r\nimport axios from 'axios'\r\nimport tokenManager from 'utils/tokenManager'\r\n\r\nconst CREATE_URI = `${config.LOGIN_API_URI}/api/users`\r\nconst LOGIN_URI = `${config.LOGIN_API_URI}/api/login`\r\nconst HOMESTATION_URI = `${config.LOGIN_API_URI}/api/storeStation`\r\n\r\n\r\nconst login = async (username, password) => {\r\n    try {\r\n        const response = await axios.post(LOGIN_URI, { username, password })\r\n    \r\n        if(response.status !== 201 || !response.data ) {\r\n            console.log('LOGIN: FAILED', response.status)\r\n            return { isLoggedIn: false }\r\n        }\r\n    \r\n        console.log('LOGIN DONE')\r\n\r\n        const token = response.data.token\r\n        if(token) {\r\n            tokenManager.setToken(token)\r\n        }\r\n\r\n        if(response.data.token !== '') window.localStorage.setItem('userToken', response.data.token)\r\n\r\n        return { isLoggedIn: true, homeStation: response.data.homeStation}\r\n    } catch (error) {\r\n        console.error('LOGIN: FAILED',error.message)\r\n        return { isLoggedIn: false }\r\n    }\r\n}\r\n\r\nconst createUser = async (username, password) => {\r\n    if(!username || !password) {\r\n        return { bCreated: false, message: 'MISSING USERNAME OR PASSWORD' }\r\n    }\r\n    try {\r\n        const response = await axios.post(CREATE_URI, { username, password })\r\n    \r\n        if(response.status !== 201 || !response.data ) {\r\n            console.log('LOGIN: FAILED', response.status)\r\n            return { bCreated: false, message: 'USERNAME IN USE EXISTS'}\r\n        }\r\n    \r\n        console.log('CREATED USER AND LOGGED IN DONE')\r\n\r\n        const token = response.data.token\r\n        if(token) {\r\n            tokenManager.setToken(token)\r\n        }\r\n\r\n        if(response.data.token !== '') window.localStorage.setItem('userToken', response.data.token)\r\n\r\n        return { bCreated: true, message: 'USER CREATED'}\r\n    } catch (error) {\r\n        console.error(error.message)\r\n        return { bCreated: false, message: 'USERNAME IN USE' }\r\n    }\r\n}\r\n\r\nconst storeHomeStation = async (homeStation) => {\r\n    try {\r\n        const data = {\r\n            station: homeStation\r\n        }\r\n        console.log(data)\r\n        const AuthorizationHeader = tokenManager.getAuthHeader()\r\n        const response = await axios.post(HOMESTATION_URI, data, AuthorizationHeader)\r\n\r\n    } catch (error) {\r\n        console.error(error.message)\r\n    }\r\n}\r\n\r\n\r\nexport default {\r\n    login,\r\n    createUser,\r\n    storeHomeStation\r\n}\r\n","import React, { useState } from 'react'\r\nimport './StationList.css'\r\nimport userService from 'services/user'\r\n\r\n/**\r\n * @typedef {import('services/bikeData').bikeStation } bikeStation\r\n */\r\n\r\nconst StationItem = ({ station, selectCenter, isCenter }) => {\r\n    const {\r\n        name,\r\n        bikesAvailable,\r\n        spacesAvailable,\r\n    } = station\r\n\r\n    const totalSpace = bikesAvailable + spacesAvailable\r\n    const bikes = `${bikesAvailable} / ${totalSpace}`\r\n    const cssName = (isCenter) ? 'station-list-item center' : 'station-list-item'\r\n\r\n    let bikeSituation = 'bad'\r\n    if(bikesAvailable > 3) bikeSituation = 'good'\r\n    else if(bikesAvailable > 0) bikeSituation = 'neutral'\r\n\r\n    return (\r\n        <tr className={cssName} onDoubleClick={() => selectCenter(station)}>\r\n            <td>\r\n                {name}\r\n            </td>\r\n            <td>\r\n                {bikes}\r\n            </td>\r\n            <td>\r\n                <div className={`status-marker ${bikeSituation}`} />\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\n/**\r\n * \r\n * @param { {\r\n *  centerId: String,\r\n *  setCenter: Function,\r\n *  stations: Array<bikeStation>,\r\n *  lastFetchTime: Number\r\n * } } params \r\n */\r\nconst StationList = ({ centerId, setCenter, stations, lastFetchTime }) => {  \r\n    const [nameCriteria, setNameCriteria] = useState('')\r\n\r\n    if(stations.length === 0) {\r\n        return (\r\n            <div>\r\n                <br></br>\r\n                FETCHING DATA - WAIT A MOMENT\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    const onFilterChange = (event) => setNameCriteria(event.target.value)\r\n\r\n    const selectCenter = (station) => {\r\n        const storedStation = {\r\n            lastFetchTime,\r\n            ...station\r\n        }\r\n        window.localStorage.setItem('centerStation', JSON.stringify(storedStation))\r\n        //try to store to database --> dont wait for response. If it fails, it fails.\r\n        userService.storeHomeStation(storedStation)\r\n        setCenter(storedStation)\r\n    }\r\n\r\n    const nameCriteriaLower = nameCriteria.toLowerCase()\r\n    const filteredStations = stations.filter(s => s.name.toLowerCase().includes(nameCriteriaLower))\r\n    const tableSatitons = filteredStations.map(s => <StationItem\r\n        key={s.stationId}\r\n        station={s}\r\n        selectCenter={selectCenter}\r\n        isCenter={s.stationId === centerId}\r\n    />)\r\n\r\n    return (\r\n        <div>\r\n            <br></br>\r\n            FILTER STATIONS: <input onChange={onFilterChange} list='nameData' value={nameCriteria} type='search' />\r\n            <br></br>\r\n            Double Click to select\r\n            <br></br>\r\n            <br></br>\r\n            <table id='station-list-table'>\r\n                <thead>\r\n                    <tr >\r\n                        <th>\r\n                            {'NAME'}\r\n                        </th>\r\n                        <th>\r\n                            {'BIKES/SPACE'}\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {tableSatitons}\r\n                </tbody>\r\n            </table>\r\n            <datalist id=\"nameData\">\r\n                {stations.map((s) =>\r\n                    <option key={s.stationId} value={s.name} />\r\n                )}\r\n            </datalist>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StationList","import React, { useState, useEffect } from 'react'\r\nimport bikeDataService from 'services/bikeData'\r\nimport StationList from './StationList'\r\nimport './SituationScreen.css'\r\n\r\n/**\r\n * @typedef {import('services/bikeData').bikeStation } bikeStation\r\n */\r\n\r\n\r\n\r\nconst distanceCalc = (point1, point2) => {\r\n    const { lat: lat1, lon: lon1 } = point1\r\n    const { lat: lat2, lon: lon2 } = point2\r\n\r\n\r\n    /* Distance calculation algo copy paster from \r\n    https://www.movable-type.co.uk/scripts/latlong.html */\r\n\r\n    const R = 6371e3; // metres\r\n    const φ1 = lat1 * Math.PI / 180; // φ, λ in radians\r\n    const φ2 = lat2 * Math.PI / 180;\r\n    const Δφ = (lat2 - lat1) * Math.PI / 180;\r\n    const Δλ = (lon2 - lon1) * Math.PI / 180;\r\n\r\n    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\r\n        Math.cos(φ1) * Math.cos(φ2) *\r\n        Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n    const d = R * c; // in metres\r\n    return d\r\n}\r\n\r\n\r\nconst updateBikeData = async (setBikeData) => {\r\n    const bikeData = await bikeDataService.getBikeData()\r\n    if (!bikeData || bikeData.lastFetchTime === 0 || bikeData.stations.length === 0) {\r\n        return\r\n    }\r\n    const { lastFetchTime, stations } = bikeData\r\n    setBikeData({ lastFetchTime, stations })\r\n}\r\n\r\n\r\nconst getStoredStationCenter = () => {\r\n    const defaultCenter = {\r\n        name: 'NO CENTER SELECTED',\r\n        bikesAvailable: 0,\r\n        spacesAvailable: 0,\r\n        stationId: null\r\n    }\r\n    try {\r\n        const storedStation = window.localStorage.getItem('centerStation')\r\n        if (storedStation) return JSON.parse(storedStation)\r\n        return defaultCenter\r\n    } catch (error) {\r\n        return defaultCenter\r\n    }\r\n}\r\n\r\nconst CenterSation = ({ center }) => {\r\n    const {\r\n        name,\r\n        bikesAvailable,\r\n        spacesAvailable,\r\n    } = center\r\n\r\n    const totalSpace = bikesAvailable + spacesAvailable\r\n    const bikes = `${bikesAvailable} / ${totalSpace}`\r\n\r\n    let bikeSituation = 'bad'\r\n    if (bikesAvailable > 3) bikeSituation = 'good'\r\n    else if (bikesAvailable > 0) bikeSituation = 'neutral'\r\n\r\n    return (\r\n        <table id='center-table' className={bikeSituation}>\r\n            <thead>\r\n                <tr key={1} >\r\n                    <th>\r\n                        {'NAME'}\r\n                    </th>\r\n                    <th>\r\n                        {'BIKES/SPACE'}\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        {name}\r\n                    </td>\r\n                    <td>\r\n                        {bikes}\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\n\r\nconst SituationScreen = () => {\r\n    const [bikeData, setBikeData] = useState({ lastFetchTime: 0, stations: [] })\r\n    const [center, setCenter] = useState(() => getStoredStationCenter())\r\n    const [showStationList, setShowStationList] = useState((!center.stationId ? true : false))\r\n\r\n    /**\r\n     * @type { { lastFetchTime: Number, stations: Array<bikeStation> } }\r\n     */\r\n    const { lastFetchTime, stations } = bikeData\r\n\r\n    useEffect(() => {\r\n        updateBikeData(setBikeData)\r\n        const updateTicker = setInterval(() => {\r\n            updateBikeData(setBikeData)\r\n        }, 10 * 1000)\r\n        return () => { \r\n            bikeDataService.resetLastFetchTime()\r\n            clearTimeout(updateTicker) \r\n        }\r\n    }, [])\r\n\r\n    const centerData = stations.find(s => s.stationId === center.stationId) || center\r\n\r\n    const timeString = new Date(lastFetchTime || center.lastFetchTime).toLocaleString()\r\n\r\n    const btnText = (showStationList) ? 'HIDE LIST' : 'CHANGE STATION'\r\n\r\n    return (\r\n        <div id='station-screen'>\r\n            <div id='center-screen'>\r\n                <h2>YOUR STATION</h2>\r\n                <CenterSation center={centerData} />\r\n                <br></br>\r\n                {timeString}\r\n            </div>\r\n            <br></br>\r\n\r\n            <button onClick={() => setShowStationList(state => !state)}>{btnText}</button>\r\n            <br></br>\r\n\r\n            { showStationList && <StationList\r\n                centerId={center.stationId}\r\n                setCenter={setCenter}\r\n                stations={stations}\r\n                lastFetchTime={lastFetchTime}\r\n            />}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default SituationScreen","import React, { useState } from 'react'\r\nimport userService from 'services/user'\r\n\r\nimport './LoginScreen.css'\r\n\r\n/**\r\n * @typedef {import('services/bikeData').bikeStation } bikeStation\r\n */\r\n\r\n const homeStationKeys = [\r\n     'id',\r\n     'user_id',\r\n     'name', \r\n     'bikes_available',\r\n     'spaces_available',\r\n     'realtime',\r\n     'lat',\r\n     'lon',\r\n     'allow_drop_off',\r\n     'last_fetch_time',\r\n    ]\r\n\r\n\r\nconst LoginScreen = ({ setUser }) => {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n\r\n\r\n    const userLoginHandler = async (event) => {\r\n        event.preventDefault()\r\n        if (username === '' || password === '') {\r\n            console.log('MISSIN USERNAME OR PASSWORD')\r\n            setErrorMessage('MISSIN USERNAME OR PASSWORD')\r\n            setTimeout(() => { setErrorMessage('') }, 5000)\r\n            return\r\n        }\r\n\r\n        const { isLoggedIn, homeStation } = await userService.login(username, password)\r\n        if (isLoggedIn) {\r\n            //read homestation from database and add it to localstorage --> SituationScreen then reads from there\r\n            if (homeStation && homeStationKeys.every(key => homeStation[key])) {\r\n                const { \r\n                    name, \r\n                    id, \r\n                    last_fetch_time, \r\n                    bikes_available, \r\n                    spaces_available, \r\n                    realtime, \r\n                    lat,\r\n                    lon,\r\n                    allow_drop_off\r\n                } = homeStation\r\n                try {\r\n                    const station = {\r\n                        name,\r\n                        stationId: id,\r\n                        bikesAvailable: bikes_available,\r\n                        spacesAvailable: spaces_available,\r\n                        realtime,\r\n                        lat,\r\n                        lon,\r\n                        allowDropoff: allow_drop_off,\r\n                        lastFetchTime: last_fetch_time\r\n                    }\r\n                    window.localStorage.setItem('centerStation', JSON.stringify(station))\r\n                } catch (error) {\r\n                    console.error(error)\r\n                }\r\n            }\r\n\r\n            window.localStorage.setItem('storedUser', username)\r\n            setUser(username)\r\n        } else {\r\n            console.log('LOGIN FAILED')\r\n            setErrorMessage('INVALID USER INFORMATION')\r\n            setTimeout(() => { setErrorMessage('') }, 5000)\r\n        }\r\n    }\r\n\r\n    const userCreateHandler = async (event) => {\r\n        event.preventDefault()\r\n        if (username === '' || password === '') {\r\n            console.log('MISSIN USERNAME OR PASSWORD')\r\n            setErrorMessage('MISSIN USERNAME OR PASSWORD')\r\n            setTimeout(() => { setErrorMessage('') }, 5000)\r\n            return\r\n        }\r\n        const { bCreated, message } = await userService.createUser(username, password)\r\n        if (bCreated) {\r\n            window.localStorage.setItem('storedUser', username)\r\n            setUser(username)\r\n        } else {\r\n            console.log('LOGIN FAILED')\r\n            setErrorMessage(message)\r\n            setTimeout(() => { setErrorMessage('') }, 5000)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id='login-screen'>\r\n            <form onSubmit={userLoginHandler}>\r\n                USERNAME: <input\r\n                    onChange={(event) => setUsername(event.target.value)}\r\n                    value={username}\r\n                    name='username'\r\n                />\r\n                <br></br>\r\n                PASSWORD: <input\r\n                    type='password'\r\n                    onChange={(event) => setPassword(event.target.value)}\r\n                    name='password'\r\n                    value={password}\r\n                />\r\n                <br></br>\r\n\r\n                <br></br>\r\n\r\n                <button type='submit' >LOGIN USER</button>\r\n                <button type='button' onClick={userCreateHandler}>CREATE USER</button>\r\n                <br></br>\r\n                <br></br>\r\n                {errorMessage}<br></br>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginScreen","import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nimport SituationScreen from './components/SituationScreen'\r\nimport LoginScreen from './components/LoginScreen'\r\nimport tokenManager from 'utils/tokenManager';\r\n\r\nconst getStoredUser = () => {\r\n  try {\r\n    const storedUser = window.localStorage.getItem('storedUser')\r\n    const storedToken = window.localStorage.getItem('userToken')\r\n    if(!storedUser || !storedToken) {\r\n      window.localStorage.clear()\r\n      return null\r\n    }\r\n\r\n    tokenManager.setToken(storedToken)\r\n\r\n    return storedUser\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\n\r\nconst App = () => {\r\n  const [user, setUser] = useState(getStoredUser())\r\n\r\n  const logout = () => {\r\n    window.localStorage.clear()\r\n    setUser(null)\r\n  }\r\n\r\n  const userText = user ? `USER: ${user}` : 'Login or Create New User'\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>HSL CITYBIKE CHECKER</h1>\r\n      <h3>{userText}</h3>\r\n      {\r\n        user\r\n          ?\r\n          <SituationScreen />\r\n          :\r\n          <LoginScreen setUser={setUser} />\r\n      }\r\n      <br></br>\r\n      {\r\n        user && <button onClick={logout}>LOGOUT</button>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}