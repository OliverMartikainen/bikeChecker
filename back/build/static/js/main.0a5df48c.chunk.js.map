{"version":3,"sources":["utils/config.js","services/bikeData.js","components/StationList.js","App.js","index.js"],"names":["API_URI","URI","config","LAST_FETCH_TIME","getBikeData","a","timeNow","Date","valueOf","console","log","axios","get","response","status","data","bikeData","lastFetchTime","stations","updateBikeData","setBikeData","bikeDataService","length","StationItem","station","selectCenter","name","bikesAvailable","stationId","spacesAvailable","totalSpace","lat","lon","bikes","onDoubleClick","CenterSation","center","key","StationList","setCenter","useState","nameCriteria","setNameCriteria","useEffect","window","localStorage","setItem","JSON","stringify","nameCriteriaLower","toLowerCase","tableSatitons","filter","s","includes","map","onChange","event","target","value","App","storedStation","getItem","parse","error","getStoredStationCenter","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a5df48c.chunk.js","sourcesContent":["const NODE_ENV = process.env.NODE_ENV\r\nconst DEV_URI = process.env.REACT_APP_DEV_URI\r\nconst API_URI = (NODE_ENV === 'development' && DEV_URI) ? `${DEV_URI}/api`: './api'\r\n\r\nexport default {\r\n    API_URI\r\n}","import config from 'utils/config'\r\nimport axios from 'axios'\r\n\r\nconst URI = `${config.API_URI}/bikeData`\r\n\r\n/* prevent client from spamming updates --> server BIKE_DATA updates every 1 min */\r\nlet LAST_FETCH_TIME = 0\r\n\r\n/**\r\n * @typedef {{\r\n    name: String, //station name\r\n    stationId: String, \r\n    bikesAvailable: 8, \r\n    spacesAvailable: Number,\r\n    realtime: Boolean, //are bikes&spaces realtime numbers (true) or is bikesAvailable = spacesAvailable / 2 (false)\r\n    lat: Number, //latitude\r\n    lon: Number //longitude\r\n    allowDropoff: Boolean //basically is it in action\r\n * }} bikeStation\r\n */\r\n\r\n/**\r\n * @returns { Promise<?{ lastFetchTime: Number, stations: Array<bikeStation> }> }\r\n * Null if data fetch failed/no update available yet\r\n */\r\nconst getBikeData = async () => {\r\n    const timeNow = new Date().valueOf()\r\n    const minuteInMsec = 60 * 1000\r\n    if(LAST_FETCH_TIME > timeNow - minuteInMsec) {\r\n        console.log('BIKEDATA: TOO SOON TO DO NEW FETCH')\r\n        return null\r\n    }\r\n\r\n    const response = await axios.get(URI)\r\n    if(response.status !== 200 || !response.data || !response.data.bikeData) {\r\n        console.log('BIKEDATA: FETCH FAILED', response.status)\r\n        return null\r\n    }\r\n\r\n    const { lastFetchTime, stations } = response.data.bikeData\r\n    LAST_FETCH_TIME = lastFetchTime\r\n    return { lastFetchTime, stations }\r\n}\r\n\r\n\r\nexport default {\r\n    getBikeData\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport bikeDataService from 'services/bikeData'\r\n\r\n/**\r\n * @typedef {import('services/bikeData').bikeStation } bikeStation\r\n */\r\n\r\n\r\n\r\nconst distanceCalc = (point1, point2) => {\r\n    const { lat: lat1, lon: lon1 } = point1\r\n    const { lat: lat2, lon: lon2 } = point2\r\n\r\n\r\n    /* Distance calculation algo copy paster from \r\n    https://www.movable-type.co.uk/scripts/latlong.html */\r\n\r\n    const R = 6371e3; // metres\r\n    const φ1 = lat1 * Math.PI / 180; // φ, λ in radians\r\n    const φ2 = lat2 * Math.PI / 180;\r\n    const Δφ = (lat2 - lat1) * Math.PI / 180;\r\n    const Δλ = (lon2 - lon1) * Math.PI / 180;\r\n\r\n    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\r\n        Math.cos(φ1) * Math.cos(φ2) *\r\n        Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n    const d = R * c; // in metres\r\n    return d\r\n}\r\n\r\n\r\nconst updateBikeData = async (setBikeData) => {\r\n    const bikeData = await bikeDataService.getBikeData()\r\n    if (!bikeData || bikeData.lastFetchTime === 0 || bikeData.stations.length === 0) {\r\n        console.log('NO DATA')\r\n        return\r\n    }\r\n    const { lastFetchTime, stations } = bikeData\r\n    setBikeData({ lastFetchTime, stations })\r\n}\r\n\r\nconst StationItem = ({ station, selectCenter }) => {\r\n    const {\r\n        name,\r\n        stationId,\r\n        bikesAvailable,\r\n        spacesAvailable,\r\n        lat,\r\n        lon,\r\n    } = station\r\n\r\n    const totalSpace = bikesAvailable + spacesAvailable\r\n    const bikes = `${bikesAvailable}/${totalSpace}`\r\n\r\n    return (\r\n        <tr onDoubleClick={() => selectCenter(station)}>\r\n            <td>\r\n                {name}\r\n            </td>\r\n            <td>\r\n                {bikes}\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nconst CenterSation = ({ center = { name: 'NO CENTER SELECTED', bikesAvailable: 0, spacesAvailable: 0} }) => {\r\n    const {\r\n        name,\r\n        bikesAvailable,\r\n        spacesAvailable,\r\n    } = center\r\n\r\n    const totalSpace = bikesAvailable + spacesAvailable\r\n    const bikes = `${bikesAvailable}/${totalSpace}`\r\n\r\n    return (\r\n        <table>\r\n        <thead>\r\n            <tr key={1} >\r\n                <th>\r\n                    {'NAME'}\r\n                </th>\r\n                <th>\r\n                    {'BIKES/SPACE'}\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n        <tr>\r\n            <td>\r\n                {name}\r\n            </td>\r\n            <td>\r\n                {bikes}\r\n            </td>\r\n        </tr>\r\n        </tbody>\r\n    </table>\r\n    )\r\n}\r\n\r\nconst StationList = ({ center, setCenter }) => {\r\n    const [bikeData, setBikeData] = useState({ lastFetchTime: 0, stations: [] })\r\n    const [nameCriteria, setNameCriteria] = useState('')\r\n\r\n    /**\r\n     * @type { { lastFetchTime: Number, stations: Array<bikeStation> } }\r\n     */\r\n    const { lastFetchTime, stations } = bikeData\r\n\r\n    useEffect(() => {\r\n        updateBikeData(setBikeData)\r\n    }, [])\r\n\r\n    const onFilterChange = (event) => setNameCriteria(event.target.value)\r\n\r\n    const selectCenter = (station) => {\r\n        window.localStorage.setItem('centerStation', JSON.stringify(station))\r\n        setCenter(station)\r\n    }\r\n\r\n    const nameCriteriaLower = nameCriteria.toLowerCase()\r\n    const filteredStations = stations.filter(s => s.name.toLowerCase().includes(nameCriteriaLower))\r\n    const tableSatitons = filteredStations.map(s => <StationItem\r\n        key={s.stationId}\r\n        station={s}\r\n        selectCenter={selectCenter}\r\n    />)\r\n\r\n    return (\r\n        <div>\r\n            <h2>CENTER STATION</h2>\r\n            <CenterSation center={center} />\r\n            <br></br>\r\n            <input onChange={onFilterChange} value={nameCriteria} />\r\n            <br></br>\r\n            Select Station as Center with double click\r\n            <br></br>\r\n            <table>\r\n                <thead>\r\n                    <tr key={1} >\r\n                        <th>\r\n                            {'NAME'}\r\n                        </th>\r\n                        <th>\r\n                            {'BIKES/SPACE'}\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {tableSatitons}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StationList","import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nimport StationList from './components/StationList'\n\nconst getStoredStationCenter = () => {\n  try {\n    const storedStation = window.localStorage.getItem('centerStation')\n    if(storedStation) return JSON.parse(storedStation) \n    return undefined\n  } catch (error) {\n    return undefined\n  }\n}\n\n\nconst App = () => {\n  const [center, setCenter] = useState(() => getStoredStationCenter())\n\n  return (\n    <div className=\"App\">\n      <h1>HELLO WORLD</h1>\n      <br></br>\n      <StationList center={center} setCenter={setCenter} />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}