{"version":3,"sources":["utils/config.js","services/bikeData.js","components/StationList.js","services/user.js","components/LoginScreen.js","App.js","index.js"],"names":["BIKE_API_URI","LOGIN_API_URI","process","URI","config","LAST_FETCH_TIME","getBikeData","a","timeNow","Date","valueOf","console","log","axios","get","response","status","data","bikeData","lastFetchTime","stations","updateBikeData","setBikeData","bikeDataService","length","StationItem","station","selectCenter","name","bikesAvailable","stationId","spacesAvailable","totalSpace","lat","lon","bikes","onDoubleClick","CenterSation","center","key","StationList","setCenter","useState","nameCriteria","setNameCriteria","useEffect","window","localStorage","setItem","JSON","stringify","nameCriteriaLower","toLowerCase","tableSatitons","filter","s","includes","map","onChange","event","target","value","login","username","password","post","token","error","LoginScreen","setUser","setUsername","setPassword","errorMessage","setErrorMessage","userSubmitHandler","preventDefault","setTimeout","userService","id","onSubmit","type","App","storedStation","getItem","parse","getStoredStationCenter","user","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99dfc944.chunk.js","sourcesContent":["const NODE_ENV = process.env.NODE_ENV\r\nconst DEV_URI = process.env.REACT_APP_DEV_URI\r\nconst BIKE_API_URI = (NODE_ENV === 'development' && DEV_URI) ? `${DEV_URI}/api`: './api'\r\nconst LOGIN_API_URI = process.env.REACT_APP_LOGIN_API_URI || 'http://localhost:3004'\r\n\r\nexport default {\r\n    BIKE_API_URI,\r\n    LOGIN_API_URI\r\n}","import config from 'utils/config'\r\nimport axios from 'axios'\r\n\r\nconst URI = `${config.BIKE_API_URI}/bikeData`\r\n\r\n/* prevent client from spamming updates --> server BIKE_DATA updates every 1 min */\r\nlet LAST_FETCH_TIME = 0\r\n\r\n/**\r\n * @typedef {{\r\n    name: String, //station name\r\n    stationId: String, \r\n    bikesAvailable: 8, \r\n    spacesAvailable: Number,\r\n    realtime: Boolean, //are bikes&spaces realtime numbers (true) or is bikesAvailable = spacesAvailable / 2 (false)\r\n    lat: Number, //latitude\r\n    lon: Number //longitude\r\n    allowDropoff: Boolean //basically is it in action\r\n * }} bikeStation\r\n */\r\n\r\n/**\r\n * @returns { Promise<?{ lastFetchTime: Number, stations: Array<bikeStation> }> }\r\n * Null if data fetch failed/no update available yet\r\n */\r\nconst getBikeData = async () => {\r\n    const timeNow = new Date().valueOf()\r\n    const minuteInMsec = 60 * 1000\r\n    if(LAST_FETCH_TIME > timeNow - minuteInMsec) {\r\n        console.log('BIKEDATA: TOO SOON TO DO NEW FETCH')\r\n        return null\r\n    }\r\n\r\n    const response = await axios.get(URI)\r\n    if(response.status !== 200 || !response.data || !response.data.bikeData) {\r\n        console.log('BIKEDATA: FETCH FAILED', response.status)\r\n        return null\r\n    }\r\n\r\n    const { lastFetchTime, stations } = response.data.bikeData\r\n    LAST_FETCH_TIME = lastFetchTime\r\n    return { lastFetchTime, stations }\r\n}\r\n\r\n\r\nexport default {\r\n    getBikeData\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport bikeDataService from 'services/bikeData'\r\n\r\n/**\r\n * @typedef {import('services/bikeData').bikeStation } bikeStation\r\n */\r\n\r\n\r\n\r\nconst distanceCalc = (point1, point2) => {\r\n    const { lat: lat1, lon: lon1 } = point1\r\n    const { lat: lat2, lon: lon2 } = point2\r\n\r\n\r\n    /* Distance calculation algo copy paster from \r\n    https://www.movable-type.co.uk/scripts/latlong.html */\r\n\r\n    const R = 6371e3; // metres\r\n    const φ1 = lat1 * Math.PI / 180; // φ, λ in radians\r\n    const φ2 = lat2 * Math.PI / 180;\r\n    const Δφ = (lat2 - lat1) * Math.PI / 180;\r\n    const Δλ = (lon2 - lon1) * Math.PI / 180;\r\n\r\n    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\r\n        Math.cos(φ1) * Math.cos(φ2) *\r\n        Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n    const d = R * c; // in metres\r\n    return d\r\n}\r\n\r\n\r\nconst updateBikeData = async (setBikeData) => {\r\n    const bikeData = await bikeDataService.getBikeData()\r\n    if (!bikeData || bikeData.lastFetchTime === 0 || bikeData.stations.length === 0) {\r\n        console.log('NO DATA')\r\n        return\r\n    }\r\n    const { lastFetchTime, stations } = bikeData\r\n    setBikeData({ lastFetchTime, stations })\r\n}\r\n\r\nconst StationItem = ({ station, selectCenter }) => {\r\n    const {\r\n        name,\r\n        stationId,\r\n        bikesAvailable,\r\n        spacesAvailable,\r\n        lat,\r\n        lon,\r\n    } = station\r\n\r\n    const totalSpace = bikesAvailable + spacesAvailable\r\n    const bikes = `${bikesAvailable}/${totalSpace}`\r\n\r\n    return (\r\n        <tr onDoubleClick={() => selectCenter(station)}>\r\n            <td>\r\n                {name}\r\n            </td>\r\n            <td>\r\n                {bikes}\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nconst CenterSation = ({ center = { name: 'NO CENTER SELECTED', bikesAvailable: 0, spacesAvailable: 0} }) => {\r\n    const {\r\n        name,\r\n        bikesAvailable,\r\n        spacesAvailable,\r\n    } = center\r\n\r\n    const totalSpace = bikesAvailable + spacesAvailable\r\n    const bikes = `${bikesAvailable}/${totalSpace}`\r\n\r\n    return (\r\n        <table>\r\n        <thead>\r\n            <tr key={1} >\r\n                <th>\r\n                    {'NAME'}\r\n                </th>\r\n                <th>\r\n                    {'BIKES/SPACE'}\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n        <tr>\r\n            <td>\r\n                {name}\r\n            </td>\r\n            <td>\r\n                {bikes}\r\n            </td>\r\n        </tr>\r\n        </tbody>\r\n    </table>\r\n    )\r\n}\r\n\r\nconst StationList = ({ center, setCenter }) => {\r\n    const [bikeData, setBikeData] = useState({ lastFetchTime: 0, stations: [] })\r\n    const [nameCriteria, setNameCriteria] = useState('')\r\n\r\n    /**\r\n     * @type { { lastFetchTime: Number, stations: Array<bikeStation> } }\r\n     */\r\n    const { lastFetchTime, stations } = bikeData\r\n\r\n    useEffect(() => {\r\n        updateBikeData(setBikeData)\r\n    }, [])\r\n\r\n    const onFilterChange = (event) => setNameCriteria(event.target.value)\r\n\r\n    const selectCenter = (station) => {\r\n        window.localStorage.setItem('centerStation', JSON.stringify(station))\r\n        setCenter(station)\r\n    }\r\n\r\n    const nameCriteriaLower = nameCriteria.toLowerCase()\r\n    const filteredStations = stations.filter(s => s.name.toLowerCase().includes(nameCriteriaLower))\r\n    const tableSatitons = filteredStations.map(s => <StationItem\r\n        key={s.stationId}\r\n        station={s}\r\n        selectCenter={selectCenter}\r\n    />)\r\n\r\n    return (\r\n        <div>\r\n            <h2>CENTER STATION</h2>\r\n            <CenterSation center={center} />\r\n            <br></br>\r\n            <input onChange={onFilterChange} value={nameCriteria} />\r\n            <br></br>\r\n            Select Station as Center with double click\r\n            <br></br>\r\n            <table>\r\n                <thead>\r\n                    <tr key={1} >\r\n                        <th>\r\n                            {'NAME'}\r\n                        </th>\r\n                        <th>\r\n                            {'BIKES/SPACE'}\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {tableSatitons}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StationList","import config from 'utils/config'\r\nimport axios from 'axios'\r\n\r\nconst URI = `${config.LOGIN_API_URI}/user`\r\n\r\nlet TOKEN = ''\r\n\r\n\r\nconst login = async (username, password) => {\r\n    try {\r\n        const response = await axios.post(URI, { username, password })\r\n    \r\n        if(response.status !== 200 || !response.data || !response.data.token) {\r\n            console.log('LOGIN: FAILED', response.status)\r\n            return false\r\n        }\r\n    \r\n        console.log('LOGIN DONE')\r\n        TOKEN = response.data.token || ''\r\n\r\n        if(response.data.token !== '') window.localStorage.setItem('userToken', response.data.token)\r\n        \r\n        return true\r\n    } catch (error) {\r\n        console.error(error)\r\n        return false\r\n    }\r\n}\r\n\r\nexport default {\r\n    login\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport userService from 'services/user'\r\n\r\nimport './LoginScreen.css'\r\n\r\nconst LoginScreen = ({ setUser }) => {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n\r\n\r\n    const userSubmitHandler = async (event) => {\r\n        event.preventDefault()\r\n        if (username === '' || password === '') {\r\n            console.log('MISSIN USERNAME OR PASSWORD')\r\n            setErrorMessage('MISSIN USERNAME OR PASSWORD')\r\n            setTimeout(() => {setErrorMessage('')}, 5000)\r\n            return\r\n        }\r\n        const success = await userService.login(username, password)\r\n        if (success) {\r\n            setUser(username)\r\n        } else {\r\n            console.log('LOGIN FAILED')\r\n            setErrorMessage('INVALID USER INFORMATION')\r\n            setTimeout(() => {setErrorMessage('')}, 5000)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id='login-screen'>\r\n            <form onSubmit={userSubmitHandler}>\r\n                USERNAME: <input\r\n                    onChange={(event) => setUsername(event.target.value)}\r\n                    value={username}\r\n                    name='username'\r\n                />\r\n                <br></br>\r\n                PASSWORD: <input\r\n                    type='password'\r\n                    onChange={(event) => setPassword(event.target.value)}\r\n                    name='password'\r\n                    value={password}\r\n                />\r\n                <br></br>\r\n                \r\n                <br></br>\r\n\r\n                <button type='submit'>LOGIN</button>\r\n                <br></br>\r\n                <br></br>\r\n                {errorMessage}<br></br>\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginScreen","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\n\r\nimport StationList from './components/StationList'\r\nimport LoginScreen from './components/LoginScreen'\r\n\r\nconst getStoredStationCenter = () => {\r\n  try {\r\n    const storedStation = window.localStorage.getItem('centerStation')\r\n    if (storedStation) return JSON.parse(storedStation)\r\n    return undefined\r\n  } catch (error) {\r\n    return undefined\r\n  }\r\n}\r\n\r\n\r\nconst App = () => {\r\n  const [center, setCenter] = useState(() => getStoredStationCenter())\r\n  const [user, setUser] = useState('as')\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>HSL CITYBIKE CHECKER</h1>\r\n      <br></br>\r\n      {\r\n        !user\r\n          ?\r\n          <LoginScreen setUser={setUser} />\r\n          :\r\n          <StationList center={center} setCenter={setCenter} />\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}